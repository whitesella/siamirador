'use strict';

exports.__esModule = true;
exports.TestableImageTools = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _flowRight = require('lodash/flowRight');

var _flowRight2 = _interopRequireDefault(_flowRight);

var _Brightness = require('@material-ui/icons/Brightness5');

var _Brightness2 = _interopRequireDefault(_Brightness);

var _Tonality = require('@material-ui/icons/Tonality');

var _Tonality2 = _interopRequireDefault(_Tonality);

var _Gradient = require('@material-ui/icons/Gradient');

var _Gradient2 = _interopRequireDefault(_Gradient);

var _ExposureSharp = require('@material-ui/icons/ExposureSharp');

var _ExposureSharp2 = _interopRequireDefault(_ExposureSharp);

var _InvertColors = require('@material-ui/icons/InvertColors');

var _InvertColors2 = _interopRequireDefault(_InvertColors);

var _TuneSharp = require('@material-ui/icons/TuneSharp');

var _TuneSharp2 = _interopRequireDefault(_TuneSharp);

var _CloseSharp = require('@material-ui/icons/CloseSharp');

var _CloseSharp2 = _interopRequireDefault(_CloseSharp);

var _ReplaySharp = require('@material-ui/icons/ReplaySharp');

var _ReplaySharp2 = _interopRequireDefault(_ReplaySharp);

var _colorManipulator = require('@material-ui/core/styles/colorManipulator');

var _withStyles = require('@material-ui/core/styles/withStyles');

var _withStyles2 = _interopRequireDefault(_withStyles);

var _withWidth = require('@material-ui/core/withWidth');

var _withWidth2 = _interopRequireDefault(_withWidth);

var _MiradorMenuButton = require('mirador/dist/es/src/components/MiradorMenuButton');

var _ImageTool = require('./ImageTool');

var _ImageTool2 = _interopRequireDefault(_ImageTool);

var _ImageRotation = require('./ImageRotation');

var _ImageRotation2 = _interopRequireDefault(_ImageRotation);

var _ImageFlip = require('./ImageFlip');

var _ImageFlip2 = _interopRequireDefault(_ImageFlip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** Styles for withStyles HOC */
var styles = function styles(_ref) {
  var _root, _borderContainer;

  var breakpoints = _ref.breakpoints,
      palette = _ref.palette;

  console.log(palette);
  var backgroundColor = palette.shades.main;
  var foregroundColor = palette.getContrastText(backgroundColor);
  var border = '1px solid ' + (0, _colorManipulator.fade)(foregroundColor, 0.2);
  var borderImageRight = 'linear-gradient(' + 'to bottom, ' + ((0, _colorManipulator.fade)(foregroundColor, 0) + ' 20%, ') + ((0, _colorManipulator.fade)(foregroundColor, 0.2) + ' 20% 80%, ') + ((0, _colorManipulator.fade)(foregroundColor, 0) + ' 80% )');
  var borderImageBottom = borderImageRight.replace('to bottom', 'to right');
  return {
    root: (_root = {
      backgroundColor: (0, _colorManipulator.fade)(backgroundColor, 0.8),
      borderRadius: 25,
      position: 'absolute',
      top: 8,
      right: 8,
      zIndex: 999,
      display: 'flex',
      flexDirection: 'row'
    }, _root[breakpoints.down('sm')] = {
      flexDirection: 'column'
    }, _root),
    borderContainer: (_borderContainer = {
      border: 0,
      borderRight: border,
      borderImageSlice: 1,
      borderImageSource: borderImageRight,
      display: 'flex',
      flexDirection: 'row'
    }, _borderContainer[breakpoints.down('sm')] = {
      flexDirection: 'column',
      borderBottom: border,
      borderRight: 'none',
      borderImageSource: borderImageBottom
    }, _borderContainer)
  };
};

var MiradorImageTools = function (_Component) {
  _inherits(MiradorImageTools, _Component);

  function MiradorImageTools(props) {
    _classCallCheck(this, MiradorImageTools);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.toggleState = _this.toggleState.bind(_this);
    _this.toggleRotate = _this.toggleRotate.bind(_this);
    _this.toggleFlip = _this.toggleFlip.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleReset = _this.handleReset.bind(_this);
    return _this;
  }

  MiradorImageTools.prototype.componentDidMount = function componentDidMount() {
    var viewer = this.props.viewer;

    if (viewer) this.applyFilters();
  };

  MiradorImageTools.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _props = this.props,
        viewConfig = _props.viewConfig,
        viewer = _props.viewer;

    if (viewer && viewConfig !== prevProps.viewConfig) this.applyFilters();
  };

  MiradorImageTools.prototype.applyFilters = function applyFilters() {
    var _props2 = this.props,
        _props2$viewConfig = _props2.viewConfig,
        _props2$viewConfig$br = _props2$viewConfig.brightness,
        brightness = _props2$viewConfig$br === undefined ? 100 : _props2$viewConfig$br,
        _props2$viewConfig$co = _props2$viewConfig.contrast,
        contrast = _props2$viewConfig$co === undefined ? 100 : _props2$viewConfig$co,
        _props2$viewConfig$sa = _props2$viewConfig.saturate,
        saturate = _props2$viewConfig$sa === undefined ? 100 : _props2$viewConfig$sa,
        _props2$viewConfig$gr = _props2$viewConfig.grayscale,
        grayscale = _props2$viewConfig$gr === undefined ? 0 : _props2$viewConfig$gr,
        _props2$viewConfig$in = _props2$viewConfig.invert,
        invert = _props2$viewConfig$in === undefined ? 0 : _props2$viewConfig$in,
        canvas = _props2.viewer.canvas;


    if (!canvas) return;

    var controlledFilters = ['brightness', 'contrast', 'saturate', 'grayscale', 'invert'];

    var currentFilters = canvas.style.filter.split(' ');
    var newFilters = currentFilters.filter(function (filter) {
      return !controlledFilters.some(function (type) {
        return filter.includes(type);
      });
    });
    newFilters.push('brightness(' + brightness + '%)');
    newFilters.push('contrast(' + contrast + '%)');
    newFilters.push('saturate(' + saturate + '%)');
    newFilters.push('grayscale(' + grayscale + '%)');
    newFilters.push('invert(' + invert + '%)');
    canvas.style.filter = newFilters.join(' ');
  };

  MiradorImageTools.prototype.toggleState = function toggleState() {
    var _props3 = this.props,
        open = _props3.open,
        updateWindow = _props3.updateWindow,
        windowId = _props3.windowId;


    updateWindow(windowId, { imageToolsOpen: !open });
  };

  MiradorImageTools.prototype.toggleRotate = function toggleRotate(value) {
    var _props4 = this.props,
        updateViewport = _props4.updateViewport,
        _props4$viewConfig = _props4.viewConfig,
        _props4$viewConfig$fl = _props4$viewConfig.flip,
        flip = _props4$viewConfig$fl === undefined ? false : _props4$viewConfig$fl,
        _props4$viewConfig$ro = _props4$viewConfig.rotation,
        rotation = _props4$viewConfig$ro === undefined ? 0 : _props4$viewConfig$ro,
        windowId = _props4.windowId;


    var offset = flip ? -1 * value : value;

    updateViewport(windowId, { rotation: (rotation + offset) % 360 });
  };

  MiradorImageTools.prototype.toggleFlip = function toggleFlip() {
    var _props5 = this.props,
        updateViewport = _props5.updateViewport,
        _props5$viewConfig$fl = _props5.viewConfig.flip,
        flip = _props5$viewConfig$fl === undefined ? false : _props5$viewConfig$fl,
        windowId = _props5.windowId;


    updateViewport(windowId, { flip: !flip });
  };

  MiradorImageTools.prototype.handleChange = function handleChange(param) {
    var _props6 = this.props,
        updateViewport = _props6.updateViewport,
        windowId = _props6.windowId;

    return function (value) {
      var _updateViewport;

      return updateViewport(windowId, (_updateViewport = {}, _updateViewport[param] = value, _updateViewport));
    };
  };

  MiradorImageTools.prototype.handleReset = function handleReset() {
    var _props7 = this.props,
        updateViewport = _props7.updateViewport,
        windowId = _props7.windowId;

    var viewConfig = {
      rotation: 0,
      flip: false,
      brightness: 100,
      contrast: 100,
      saturate: 100,
      grayscale: 0,
      invert: 0
    };

    updateViewport(windowId, viewConfig);
  };

  MiradorImageTools.prototype.render = function render() {
    var _this2 = this;

    var _props8 = this.props,
        classes = _props8.classes,
        containerId = _props8.containerId,
        enabled = _props8.enabled,
        open = _props8.open,
        viewer = _props8.viewer,
        windowId = _props8.windowId,
        width = _props8.width,
        palette = _props8.theme.palette,
        _props8$viewConfig = _props8.viewConfig,
        _props8$viewConfig$fl = _props8$viewConfig.flip,
        flip = _props8$viewConfig$fl === undefined ? false : _props8$viewConfig$fl,
        _props8$viewConfig$br = _props8$viewConfig.brightness,
        brightness = _props8$viewConfig$br === undefined ? 100 : _props8$viewConfig$br,
        _props8$viewConfig$co = _props8$viewConfig.contrast,
        contrast = _props8$viewConfig$co === undefined ? 100 : _props8$viewConfig$co,
        _props8$viewConfig$sa = _props8$viewConfig.saturate,
        saturate = _props8$viewConfig$sa === undefined ? 100 : _props8$viewConfig$sa,
        _props8$viewConfig$gr = _props8$viewConfig.grayscale,
        grayscale = _props8$viewConfig$gr === undefined ? 0 : _props8$viewConfig$gr,
        _props8$viewConfig$in = _props8$viewConfig.invert,
        invert = _props8$viewConfig$in === undefined ? 0 : _props8$viewConfig$in,
        t = _props8.t;


    if (!viewer || !enabled) return null;

    var backgroundColor = palette.shades.main;
    var foregroundColor = palette.getContrastText(backgroundColor);
    var isSmallDisplay = ['xs', 'sm'].indexOf(width) >= 0;

    /** Button for toggling the menu */
    var toggleButton = _react2.default.createElement(
      'div',
      { className: isSmallDisplay && open ? classes.borderContainer : '' },
      _react2.default.createElement(
        _MiradorMenuButton.MiradorMenuButton,
        {
          'aria-label': t('collapse', { context: open ? 'open' : 'close' }),
          containerId: containerId,
          onClick: this.toggleState
        },
        open ? _react2.default.createElement(_CloseSharp2.default, null) : _react2.default.createElement(_TuneSharp2.default, null)
      )
    );
    return _react2.default.createElement(
      'div',
      { className: 'MuiPaper-elevation4 ' + classes.root },
      isSmallDisplay && toggleButton,
      open && _react2.default.createElement(
        _react2.default.Fragment,
        null,
        _react2.default.createElement(
          'div',
          { className: classes.borderContainer },
          _react2.default.createElement(_ImageRotation2.default, {
            containerId: containerId,
            label: t('rotateRight'),
            onClick: function onClick() {
              return _this2.toggleRotate(90);
            },
            variant: 'right'
          }),
          _react2.default.createElement(_ImageRotation2.default, {
            containerId: containerId,
            label: t('rotateLeft'),
            onClick: function onClick() {
              return _this2.toggleRotate(-90);
            },
            variant: 'left'
          }),
          _react2.default.createElement(_ImageFlip2.default, {
            label: t('flip'),
            onClick: this.toggleFlip,
            flipped: flip,
            containerId: containerId
          })
        ),
        _react2.default.createElement(
          'div',
          { className: classes.borderContainer },
          _react2.default.createElement(
            _ImageTool2.default,
            {
              type: 'brightness',
              label: t('brightness'),
              max: 200,
              windowId: windowId,
              value: brightness,
              foregroundColor: foregroundColor,
              containerId: containerId,
              onChange: this.handleChange('brightness')
            },
            _react2.default.createElement(_Brightness2.default, null)
          ),
          _react2.default.createElement(
            _ImageTool2.default,
            {
              type: 'contrast',
              label: t('contrast'),
              max: 200,
              windowId: windowId,
              value: contrast,
              foregroundColor: foregroundColor,
              containerId: containerId,
              onChange: this.handleChange('contrast')
            },
            _react2.default.createElement(_ExposureSharp2.default, { style: { transform: 'rotate(180deg)' } })
          ),
          _react2.default.createElement(
            _ImageTool2.default,
            {
              type: 'saturate',
              label: t('saturation'),
              max: 200,
              windowId: windowId,
              value: saturate,
              foregroundColor: foregroundColor,
              containerId: containerId,
              onChange: this.handleChange('saturate')
            },
            _react2.default.createElement(_Gradient2.default, null)
          ),
          _react2.default.createElement(
            _ImageTool2.default,
            {
              type: 'grayscale',
              variant: 'toggle',
              label: t('greyscale'),
              windowId: windowId,
              value: grayscale,
              backgroundColor: backgroundColor,
              foregroundColor: foregroundColor,
              containerId: containerId,
              onChange: this.handleChange('grayscale')
            },
            _react2.default.createElement(_Tonality2.default, null)
          ),
          _react2.default.createElement(
            _ImageTool2.default,
            {
              type: 'invert',
              variant: 'toggle',
              label: t('invert'),
              windowId: windowId,
              value: invert,
              foregroundColor: foregroundColor,
              containerId: containerId,
              onChange: this.handleChange('invert')
            },
            _react2.default.createElement(_InvertColors2.default, null)
          )
        ),
        _react2.default.createElement(
          'div',
          { className: isSmallDisplay ? '' : classes.borderContainer },
          _react2.default.createElement(
            _MiradorMenuButton.MiradorMenuButton,
            {
              'aria-label': t('revert'),
              containerId: containerId,
              onClick: this.handleReset
            },
            _react2.default.createElement(_ReplaySharp2.default, null)
          )
        )
      ),
      !isSmallDisplay && toggleButton
    );
  };

  return MiradorImageTools;
}(_react.Component);

MiradorImageTools.propTypes = process.env.NODE_ENV !== "production" ? {
  classes: _propTypes2.default.object.isRequired, // eslint-disable-line react/forbid-prop-types
  containerId: _propTypes2.default.string.isRequired,
  enabled: _propTypes2.default.bool,
  open: _propTypes2.default.bool,
  t: _propTypes2.default.func.isRequired,
  theme: _propTypes2.default.object.isRequired, // eslint-disable-line react/forbid-prop-types
  updateViewport: _propTypes2.default.func.isRequired,
  updateWindow: _propTypes2.default.func.isRequired,
  viewer: _propTypes2.default.object, // eslint-disable-line react/forbid-prop-types
  viewConfig: _propTypes2.default.object, // eslint-disable-line react/forbid-prop-types
  windowId: _propTypes2.default.string.isRequired,
  width: _propTypes2.default.oneOf(['lg', 'md', 'sm', 'xl', 'xs']).isRequired
} : {};

MiradorImageTools.defaultProps = {
  enabled: true,
  open: true,
  viewer: undefined,
  viewConfig: {}
};

// Export without wrapping HOC for testing.
var TestableImageTools = exports.TestableImageTools = MiradorImageTools;

exports.default = (0, _flowRight2.default)((0, _withStyles2.default)(styles), (0, _withWidth2.default)())(MiradorImageTools);